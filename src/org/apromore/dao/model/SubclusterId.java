package org.apromore.dao.model;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

import javax.persistence.Column;
import javax.persistence.Embeddable;
import java.io.Serializable;

/**
 * SubclusterId generated by hbm2java
 */
@Embeddable
public class SubclusterId implements Serializable {

    /** Hard coded for interoperability. */
    private static final long serialVersionUID = -2354111738938485548L;

    private String fragmentVersionId;
    private String parentClusterId;


    /**
     * Default Constructor.
     */
    public SubclusterId() { }

    /**
     * constructor to setup the object.
     * @param newFragmentVersionId the fragment version id
     * @param newParentClusterId the parent cluster id
     */
    public SubclusterId(final String newFragmentVersionId, final String newParentClusterId) {
        this.fragmentVersionId = newFragmentVersionId;
        this.parentClusterId = newParentClusterId;
    }


    /**
     * Get the fragment version for the Object.
     * @return Returns the fragment version.
     */
    @Column(name = "fragment_version_id", nullable = false, length = 40)
    public String getFragmentVersionId() {
        return this.fragmentVersionId;
    }

    /**
     * Set the fragment version for the Object.
     * @param newFragmentVersionId The fragment version to set.
     */
    public void setFragmentVersionId(final String newFragmentVersionId) {
        this.fragmentVersionId = newFragmentVersionId;
    }


    /**
     * Get the parent cluster for the Object.
     * @return Returns the parent cluster.
     */
    @Column(name = "parent_cluster_id", nullable = false, length = 80)
    public String getParentClusterId() {
        return this.parentClusterId;
    }

    /**
     * Set the parent cluster for the Object.
     * @param newParentClusterId The parent cluster to set.
     */
    public void setParentClusterId(final String newParentClusterId) {
        this.parentClusterId = newParentClusterId;
    }


    /**
     * The equals standard method to test if the Sub Cluster entity is the same.
     * @param obj the other ID object
     * @return true if the same otherwise false
     */
    @Override
	public boolean equals(Object obj) {
        Boolean result = false;

        if (obj instanceof SubclusterId) {
            SubclusterId other = (SubclusterId) obj;
            EqualsBuilder builder = new EqualsBuilder();
            builder.append(getFragmentVersionId(), other.getFragmentVersionId());
            builder.append(getParentClusterId(), other.getParentClusterId());
            result = builder.isEquals();
        }

        return result;
	}

    /**
     * Determines the hashcode of the object.
     * @return the hashcode
     */
    @Override
	public int hashCode() {
        HashCodeBuilder builder = new HashCodeBuilder();
        builder.append(getFragmentVersionId());
        builder.append(getParentClusterId());
        return builder.toHashCode();
	}

}


