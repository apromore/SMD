package org.apromore.dao.model;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Type;
import org.springframework.beans.factory.annotation.Configurable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Node generated by hbm2java
 */
@Entity
@Table(name = "node")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Configurable("node")
public class Node implements Serializable {

    /**
     * Hard coded for interoperability.
     */
    private static final long serialVersionUID = -5232538404638485548L;

    private Integer vid;
    private String vname;
    private String vtype;
    private String ctype;
    private String originalId;
    private Boolean configuration = false;

    private Content content;
    private ProcessModelVersion subVersion;
    private Set<Edge> edgesForSourceVid = new HashSet<Edge>(0);
    private Set<Edge> edgesForTargetVid = new HashSet<Edge>(0);

    private Set<ObjectRefType> objectRefTypes = new HashSet<ObjectRefType>(0);
    private Set<ResourceRefType> resourceRefTypes = new HashSet<ResourceRefType>(0);
    private Set<NodeAttribute> attributes = new HashSet<NodeAttribute>(0);


    public Node() { }


    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "vid", unique = true, nullable = false, length = 40)
    public Integer getVid() {
        return this.vid;
    }

    public void setVid(final Integer newVid) {
        this.vid = newVid;
    }



    @Column(name = "vname", length = 2000)
    public String getVname() {
        return this.vname;
    }

    public void setVname(final String newVname) {
        this.vname = newVname;
    }


    @Column(name = "vtype", length = 100)
    public String getVtype() {
        return this.vtype;
    }

    public void setVtype(final String newVtype) {
        this.vtype = newVtype;
    }

    @Column(name = "original_Id", length = 40)
    public String getOriginalId() {
        return this.originalId;
    }

    public void setOriginalId(final String newOriginalId) {
        this.originalId = newOriginalId;
    }

    @Column(name = "ctype", length = 40)
    public String getCtype() {
        return this.ctype;
    }

    public void setCtype(final String newCtype) {
        this.ctype = newCtype;
    }

    @Type(type = "boolean")
    @Column(name = "configuration", length = 1)
    public Boolean getConfiguration() {
        return this.configuration;
    }

    public void setConfiguration(final Boolean newConfigurable) {
        this.configuration = newConfigurable;
    }



    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "content_id")
    public Content getContent() {
        return this.content;
    }

    public void setContent(final Content newContent) {
        this.content = newContent;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "sub_version_id")
    public ProcessModelVersion getSubVersion() {
        return this.subVersion;
    }

    public void setSubVersion(final ProcessModelVersion newSubVersion) {
        this.subVersion = newSubVersion;
    }


    @OneToMany(fetch = FetchType.LAZY, mappedBy = "verticesBySourceVid")
    public Set<Edge> getEdgesForSourceVid() {
        return this.edgesForSourceVid;
    }

    public void setEdgesForSourceVid(final Set<Edge> newEdgesForSourceVid) {
        this.edgesForSourceVid = newEdgesForSourceVid;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "verticesByTargetVid")
    public Set<Edge> getEdgesForTargetVid() {
        return this.edgesForTargetVid;
    }

    public void setEdgesForTargetVid(final Set<Edge> newEdgesForTargetVid) {
        this.edgesForTargetVid = newEdgesForTargetVid;
    }


    @OneToMany(fetch = FetchType.LAZY, mappedBy = "node")
    public Set<ResourceRefType> getResourceRefTypes() {
        return this.resourceRefTypes;
    }

    public void setResourceRefTypes(Set<ResourceRefType> resourceRefTypes) {
        this.resourceRefTypes = resourceRefTypes;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "node")
    public Set<ObjectRefType> getObjectRefTypes() {
        return this.objectRefTypes;
    }

    public void setObjectRefTypes(Set<ObjectRefType> objectRefTypes) {
        this.objectRefTypes = objectRefTypes;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "node")
    public Set<NodeAttribute> getAttributes() {
        return this.attributes;
    }

    public void setAttributes(Set<NodeAttribute> newAttributes) {
        this.attributes = newAttributes;
    }
}


