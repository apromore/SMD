package org.apromore.dao.model;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.springframework.beans.factory.annotation.Configurable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import java.util.HashSet;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * ResourceRefType generated by hbm2java
 */
@Entity
@Table(name = "resource_ref_type")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Configurable("resourceRefType")
public class ResourceRefType implements java.io.Serializable {

    private Integer id;
    private String optional;
    private String qualifier;

    private Node node;
    private ResourceType resourceType;
    private Set<ResourceRefTypeAttribute> resourceRefTypeAttributes = new HashSet<ResourceRefTypeAttribute>(0);


    public ResourceRefType() { }


    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }


    @Column(name = "optional", length = 1)
    public String getOptional() {
        return this.optional;
    }

    public void setOptional(String optional) {
        this.optional = optional;
    }


    @Column(name = "qualifier")
    public String getQualifier() {
        return this.qualifier;
    }

    public void setQualifier(String qualifier) {
        this.qualifier = qualifier;
    }


    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "node_id")
    public Node getNode() {
        return this.node;
    }

    public void setNode(Node node) {
        this.node = node;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "resource_type_id")
    public ResourceType getResourceType() {
        return this.resourceType;
    }

    public void setResourceType(ResourceType resourceType) {
        this.resourceType = resourceType;
    }


    @OneToMany(fetch = FetchType.LAZY, mappedBy = "resourceRefType")
    public Set<ResourceRefTypeAttribute> getResourceRefTypeAttributes() {
        return this.resourceRefTypeAttributes;
    }

    public void setResourceRefTypeAttributes(Set<ResourceRefTypeAttribute> resourceRefTypeAttributes) {
        this.resourceRefTypeAttributes = resourceRefTypeAttributes;
    }

}


