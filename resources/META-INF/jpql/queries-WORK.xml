<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings version="1.0" xmlns="http://java.sun.com/xml/ns/persistence/orm"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd ">

	<named-query name="fragmentVersion.getAllFragmentsWithSize">
        <!-- Used FragmentVersionDao -->
        <query>SELECT fv.fragmentVersionId, fv.fragmentSize
            FROM FragmentVersion fv</query>
    </named-query>
    
    <named-query name="fragmentVersion.getFragmentsOfProcesses">
        <!-- Used ClusteringDao -->
        <query>SELECT f FROM FragmentVersion f, ProcessFragmentMap m, ProcessModelVersion pmv, ProcessBranch b, Process p 
        	WHERE f.fragmentVersionId = m.fragmentVersion.fragmentVersionId AND m.processModelVersion.processModelVersionId = pmv.processModelVersionId AND 
        	pmv.processBranch.branchId = b.branchId AND b.process.processId = p.processId AND p.processId IN (:processIds)</query>
    </named-query>
    
    <named-query name="fragmentVersion.getFragmentsOfProcessName">
        <!-- Used FragmentVersionDao -->
        <query>SELECT f FROM FragmentVersion f, ProcessFragmentMap m, ProcessModelVersion pmv, ProcessBranch b, Process p 
        	WHERE f.fragmentVersionId = m.fragmentVersion.fragmentVersionId AND m.processModelVersion.processModelVersionId = pmv.processModelVersionId AND 
        	pmv.processBranch.branchId = b.branchId AND b.process.processId = p.processId AND p.name = :processName AND f.fragmentSize > :minSize</query>
    </named-query>
    
	<named-query name="clusterInfo.deleteAllCusters">
        <!-- Used ClusteringDao -->
        <query>DELETE FROM ClusterInfo c</query>
    </named-query>
    
    <named-query name="clusterAssignment.deleteAllCusterAssignments">
        <!-- Used ClusteringDao -->
        <query>DELETE FROM ClusterAssignment ca</query>
    </named-query>
    
	<named-query name="fragmentVersion.getUnprocessedFragments">
        <!-- Used ClusteringDao -->
        <query>SELECT f FROM FragmentVersion f</query>
    </named-query>
    
    <named-query name="fragmentVersionDag.getAllParentChildMappings">
        <!-- Used FragmentVersionDagDao -->
        <query>SELECT fvd FROM FragmentVersionDag fvd</query>
    </named-query>

    <named-query name="clusterInfo.getAllClusters">
        <!-- Used ClusteringDaoJpa -->
       	<query>SELECT c FROM ClusterInfo c</query>
    </named-query>
    
    <named-query name="clusteringSummary.getClusteringSummary">
        <!-- Used ClusteringDao -->
        <query>SELECT new org.apromore.dao.model.ClusteringSummary(count(c.clusterId), min(c.size), max(c.size), min(c.avgFragmentSize), max(c.avgFragmentSize), min(c.BCR), max(c.BCR)) FROM ClusterInfo c</query>
    </named-query>
    
    <named-query name="clusterInfo.getClusterById">
        <!-- Used ClusteringDaoJpa -->
       	<query>SELECT c FROM ClusterInfo c WHERE c.clusterId = :clusterId</query>
    </named-query>
    
    <named-query name="clusterAssignment.getFragmentsOfCluster">
        <!-- Used ClusteringDao -->
        <query>SELECT f FROM FragmentVersion f, ClusterAssignment ca 
        	WHERE ca.id.clusterId = :clusterId AND ca.id.fragmentId = f.fragmentVersionId</query>
    </named-query>
    
    <named-query name="clusterAssignment.getFragmentsOfCluster2">
        <!-- Used ClusteringDao -->
        <query>SELECT f FROM FragmentVersion f, ClusterAssignment ca, ProcessFragmentMap m, ProcessModelVersion pmv 
        	WHERE ca.id.clusterId = :clusterId AND ca.id.fragmentId = f.fragmentVersionId 
        	AND f.fragmentVersionId = m.fragmentVersion.fragmentVersionId AND m.processModelVersion.processModelVersionId = pmv.processModelVersionId</query>
    </named-query>
    
    <named-query name="fragmentDistance.getDistancesBelowThreshold">
        <!-- Used ClusteringDao -->
        <query>SELECT fd FROM FragmentDistance fd 
        	WHERE fd.distance &lt; :threshold</query>
    </named-query>
    
    <named-query name="fragmentDistance.getDistance">
        <!-- Used ClusteringDao -->
        <query>SELECT fd.distance FROM FragmentDistance fd 
        	WHERE fd.id.fragmentId1 = :fragmentId1 
        	AND fd.id.fragmentId2 = :fragmentId2</query>
    </named-query>
    
    <named-query name="clusterAssignment.getFragmentIdsOfCluster">
        <!-- Used ClusteringDao -->
        <query>SELECT ca.id.fragmentId FROM ClusterAssignment ca 
        	WHERE ca.id.clusterId = :clusterId</query>
    </named-query>
    
    <named-query name="clusterInfo.getFilteredClusters">
        <!-- Used ClusteringDaoJpa -->
       	<query>SELECT c FROM ClusterInfo c 
       		WHERE (c.size &gt; :minClusterSize OR c.size = :minClusterSize)
       		AND (c.size &lt; :maxClusterSize OR c.size = :maxClusterSize) 
       		AND (c.avgFragmentSize &gt; :minAvgFragmentSize OR c.avgFragmentSize = :minAvgFragmentSize)
       		AND (c.avgFragmentSize &lt; :maxAvgFragmentSize OR c.avgFragmentSize = :maxAvgFragmentSize) 
       		AND (c.BCR &gt; :minBCR OR c.BCR = :minBCR) 
       		AND (c.BCR &lt; :maxBCR OR c.BCR = :maxBCR)</query>
    </named-query>
    
    <named-query name="annotation.getAnnotation">
        <!-- Used AnnotationDao -->
        <query>SELECT a FROM Annotation a, ProcessModelVersion p
            WHERE a.processModelVersion.processModelVersionId = p.processModelVersionId
            AND p.processModelVersionId = :processId
            AND p.versionName = :versionName
            AND a.name = :name</query>
    </named-query>
    <named-query name="annotation.getAnnotationByUrl">
        <!-- Used AnnotationDao -->
        <query>SELECT a FROM Annotation a
            WHERE a.natve.uri = :uri</query>
    </named-query>

    <named-query name="content.getContentByFragmentVersion">
        <!-- Used ContentDao -->
        <query>SELECT c FROM FragmentVersion fv, Content c
            WHERE fv.content.contentId = c.contentId
            AND fv.fragmentVersionId = :fragVersion</query>
    </named-query>
    <named-query name="content.getContentByHash">
        <!-- Used ContentDao -->
        <query>SELECT c FROM Content c
            WHERE c.code = :code</query>
    </named-query>


    <named-query name="edge.getEdgesByContentId">
        <!-- Used EdgeDao -->
        <query>SELECT e FROM Edge e
            WHERE e.content.contentId = :contentId</query>
    </named-query>
    <named-query name="edge.getEdgesByFragmentId">
        <!-- Used EdgeDao -->
        <query>SELECT e FROM Edge e, FragmentVersion fv 
            WHERE e.content.contentId = fv.content.contentId AND fv.fragmentVersionId = :fragmentId</query>
    </named-query>
    <named-query name="edge.getStoredEdges">
        <!-- Used EdgeDao -->
        <query>SELECT count(e) FROM Edge e</query>
    </named-query>


    <named-query name="fragmentVersion.getFragmentVersion">
        <!-- Used FragmentVersionDao -->
        <query>SELECT fv FROM FragmentVersion fv
            WHERE fv.fragmentVersionId = :id</query>
    </named-query>
    <named-query name="fragmentVersion.getAllFragmentVersion">
        <!-- Used FragmentVersionDao -->
        <query>SELECT fv FROM FragmentVersion fv</query>
    </named-query>
    <named-query name="fragmentVersion.getFragmentVersionByContentIdMappingCode">
        <!-- Used FragmentVersionDao -->
        <query>SELECT fv FROM FragmentVersion fv
            WHERE fv.content.contentId = :contentId
            AND fv.childMappingCode = :mappingCode</query>
    </named-query>
    <named-query name="fragmentVersion.getUsedProcessModelForFragment">
        <!-- Used FragmentVersionDao -->
        <query>SELECT count(p.processModelVersionId) FROM ProcessModelVersion p
            WHERE p.rootFragmentVersionId = :fragVersionId</query>
    </named-query>
    <named-query name="fragmentVersion.getLockedParentFragmentIds">
        <!-- Used FragmentVersionDao -->
        <query>SELECT fv.fragmentVersionId FROM FragmentVersion fv, FragmentVersionDag fvd
            WHERE fv.fragmentVersionId = fvd.id.fragmentVersionId
            AND fv.lockStatus = 1
            AND fvd.id.childFragmentVersionId = :childFragVersionId</query>
    </named-query>
    <named-query name="fragmentVersion.getChildFragmentsWithSize">
        <!-- Used FragmentVersionDao -->
        <query>SELECT new map(fv.fragmentVersionId, fv.fragmentSize)
            FROM FragmentVersionDag fvd, FragmentVersion fv
            WHERE fv.fragmentVersionId = fvd.id.fragmentVersionId
            AND fvd.id.fragmentVersionId = :fragVersionId</query>
    </named-query>
    
     <named-query name="fragmentVersion.getRootFragmentIdAboveSize">
        <!-- Used FragmentVersionDao -->
        <query>SELECT f.fragmentVersionId
            FROM FragmentVersion f, ProcessModelVersion pmv
            WHERE f.fragmentVersionId = pmv.rootFragmentVersionId
            AND f.fragmentSize > :minSize</query>
    </named-query>
    
    <named-query name="fragmentVersion.getChildFragmentsWithType">
        <!-- Used FragmentVersionDao -->
        <query>SELECT new map(fv.fragmentVersionId, fv.fragmentType)
            FROM FragmentVersionDag fvd, FragmentVersion fv
            WHERE fv.fragmentVersionId = fvd.id.fragmentVersionId
            AND fvd.id.fragmentVersionId = :fragVersionId</query>
    </named-query>
    <named-query name="fragmentVersion.getFragmentData">
        <!-- Used FragmentVersionDao -->
        <query>SELECT fv From FragmentVersion fv
            WHERE fv.fragmentVersionId = :fragVersionId</query>
    </named-query>
    <named-query name="fragmentVersion.getFragmentDataOfProcessModel">
        <!-- Used FragmentVersionDao -->
        <query>SELECT fv From FragmentVersion fv, ProcessFragmentMap pfm
            WHERE fv.fragmentVersionId = pfm.fragmentVersion.fragmentVersionId
            AND pfm.processModelVersion.processModelVersionId = :procModelId</query>
    </named-query>
    <named-query name="fragmentVersion.getUsedFragmentIds">
        <!-- Used FragmentVersionDao -->
        <query>SELECT fv.fragmentVersionId FROM FragmentVersion fv
            WHERE fv.content.contentId = :contentId</query>
    </named-query>
    <named-query name="fragmentVersion.getSimilarFragmentsBySize">
        <!-- Used FragmentVersionDao -->
        <query>SELECT fv FROM FragmentVersion fv
            WHERE fv.fragmentSize &gt; :min
            AND fv.fragmentSize &lt; :max</query>
    </named-query>
    <named-query name="fragmentVersion.getSimilarFragmentsBySizeType">
        <!-- Used FragmentVersionDao -->
        <query>SELECT fv FROM FragmentVersion fv
            WHERE fv.fragmentSize &gt; :min
            AND fv.fragmentSize &lt; :max
            AND fv.fragmentType = :type</query>
    </named-query>

	<named-query name="fragmentVersionDag.getAllDagsWithSize">
        <!-- Used FragmentVersionDagDao -->
        <query>SELECT fvd FROM FragmentVersionDag fvd, FragmentVersion f
            WHERE fvd.id.childFragmentVersionId = f.fragmentVersionId AND f.fragmentSize > :minSize</query>
    </named-query>
    
    <named-query name="fragmentVersionDag.getAllDagsWithinSize">
        <!-- Used FragmentVersionDagDao -->
        <query>SELECT fvd FROM FragmentVersionDag fvd, FragmentVersion f
            WHERE fvd.id.childFragmentVersionId = f.fragmentVersionId AND f.fragmentSize > :minSize AND 
            fvd.id.childFragmentVersionId = f.fragmentVersionId AND f.fragmentSize > :minSize</query>
    </named-query>
    
    <named-query name="fragmentVersionDag.getParentFragmentVersions">
        <!-- Used FragmentVersionDao, AnalysisDao -->
        <query>SELECT f FROM FragmentVersionDag fvd, FragmentVersion f
            WHERE f.fragmentVersionId = fvd.id.fragmentVersionId AND fvd.id.childFragmentVersionId = :childId</query>
    </named-query>
    <named-query name="fragmentVersionDag.getChildMappings">
        <!-- Used FragmentVersionDagDao -->
        <query>SELECT fvd.id FROM ChildMappingDO fvd
            WHERE fvd.id.fragmentVersionId = :fragVersionId</query>
    </named-query>
    <named-query name="fragmentVersionDag.getChildFragmentsByFragmentVersion">
        <!-- Used FragmentVersionDagDao -->
        <query>SELECT fv FROM FragmentVersionDag fvd, FragmentVersion fv
            WHERE fvd.id.childFragmentVersionId = fv.fragmentVersionId
            AND fv.fragmentVersionId = :fragVersionId</query>
    </named-query>
    <named-query name="fragmentVersionDag.getChildFragmentCount">
        <!-- Used FragmentVersionDagDao -->
        <query>SELECT fv FROM FragmentVersionDag fvd, FragmentVersion fv
            WHERE fvd.id.childFragmentVersionId = fv.fragmentVersionId
            AND fv.fragmentVersionId = :fragVersionId</query>
    </named-query>


    <named-query name="native.getNative">
        <!-- Used NativeDao -->
        <query>SELECT n FROM Native n, ProcessModelVersion p
            WHERE n.processModelVersion.processModelVersionId = p.processModelVersionId
            AND p.processBranch.branchId = :branchId
            AND p.versionName = :versionName
            AND n.nativeType.natType = :nativeType</query>
    </named-query>
    <named-query name="native.getNativeTypes">
        <!-- Used NativeDao -->
        <query>SELECT n
            FROM Native n, ProcessModelVersion p
            WHERE n.processModelVersion.processModelVersionId = p.processModelVersionId
            AND p.processBranch.branchId = :branchId
            AND p.versionName = :versionName
        </query>
    </named-query>


    <named-query name="nativeType.getNativeTypeFormat">
        <!-- Used NativeTypeDao -->
        <query>SELECT n FROM NativeType n</query>
    </named-query>
    <named-query name="nativeType.getNativeTypeFormats">
        <!-- Used NativeTypeDao -->
        <query>SELECT n
            FROM NativeType n
            WHERE n.natType = :name
        </query>
    </named-query>


    <named-query name="process.getAllProcesses">
        <!-- Used ProcessDao -->
        <query>SELECT p FROM Process p</query>
    </named-query>
    <named-query name="process.getAllDomains">
        <!-- Used ProcessDao -->
        <query>SELECT DISTINCT p.domain
            FROM Process p
            ORDER by p.domain
        </query>
    </named-query>
    <named-query name="process.getProcessById">
        <!-- Used ProcessDao -->
        <query>SELECT p
            FROM Process p
            WHERE p.processId = :id
        </query>
    </named-query>
    <named-query name="process.getProcessByName">
        <!-- Used ProcessDao -->
        <query>SELECT p
            FROM Process p
            WHERE p.name = :name
        </query>
    </named-query>


    <named-query name="processBranch.getProcessBranchByProcessBranchName">
        <!-- Used ProcessBranchDao -->
        <query>SELECT b
            FROM ProcessBranch b
            WHERE b.process.processId = :processId
            AND b.branchName = :name
        </query>
    </named-query>


    <named-query name="processModelVersion.getProcessModelVersionByBranch">
        <!-- Used AnalysisDao -->
        <query>SELECT pmv
            FROM ProcessModelVersion pmv
            WHERE pmv.processBranch.branchId = :id
            AND pmv.processBranch.branchName = :name
        </query>
    </named-query>
    <named-query name="processModelVersion.getUsedProcessModelVersions">
        <!-- Used AnalysisDao -->
        <query>SELECT pm
            FROM ProcessModelVersion pm
            WHERE pm.rootFragmentVersionId = :id
        </query>
    </named-query>
    <named-query name="processModelVersion.getRootFragmentProcessModel">
        <!-- Used ProcessDao -->
        <query>SELECT pm.rootFragmentVersionId
            FROM ProcessModelVersion pm
            WHERE pm.processModelVersionId = :id
        </query>
    </named-query>
    <named-query name="processModelVersion.getMaxVersionProcessModel">
        <!-- Used ProcessModelVersionDao -->
        <query>SELECT pm
            FROM ProcessModelVersion pm
            WHERE pm.versionNumber = (SELECT max(pm1.versionNumber)
            FROM ProcessModelVersion pm1
            WHERE pm1.processBranch.branchId = :branchId)
        </query>
    </named-query>
    <named-query name="processModelVersion.getCurrentProcessModels">
        <!-- Used ProcessDao -->
        <query>SELECT pm.processModelVersionId, pm.versionNumber, pm.processBranch.branchId
            FROM ProcessModelVersion pm
            WHERE pm.processBranch.branchId = (SELECT pm2.processBranch.branchId
            FROM ProcessModelVersion pm2
            GROUP BY pm2.processBranch.branchId)
            AND pm.versionNumber = (SELECT MAX(pm2.versionNumber)
            FROM ProcessModelVersion pm2
            GROUP BY pm2.processBranch.branchId)
        </query>
    </named-query>
    <named-query name="processModelVersion.getCurrentProcessModelVersionA">
        <!-- Used ProcessModelVersionDao -->
        <query>SELECT pmv
            FROM ProcessModelVersion pmv
            WHERE pmv.processBranch.branchId = :branchId
            AND pmv.versionNumber = (SELECT max(pmv1.versionNumber)
            FROM ProcessModelVersion pmv1
            WHERE pmv1.processBranch.branchId = :branchId)
        </query>
    </named-query>
    <named-query name="processModelVersion.getCurrentRootFragmentId">
        <!-- Used ProcessModelVersionDao -->
        <query>SELECT pmv.rootFragmentVersionId
            FROM ProcessModelVersion pmv
            WHERE pmv.processBranch.branchId =
            (SELECT pb.branchId
            FROM ProcessBranch pb
            WHERE pb.process.processId = :processId
            AND pb.branchName = :branchName)
            AND pmv.versionNumber =
            (SELECT max(pmv1.versionNumber) from ProcessModelVersion pmv1
            WHERE pmv1.processBranch.branchId =
            (SELECT pb1.branchId
            FROM ProcessBranch pb1
            WHERE pb1.process.processId = :processId
            AND pb1.branchName = :branchName))</query>
    </named-query>
    <named-query name="processModelVersion.getCurrentProcessModelVersionB">
        <!-- Used ProcessModelVersionDao -->
        <query>SELECT pmv
            FROM ProcessModelVersion pmv
            WHERE pmv.processBranch.branchId =
            (SELECT pb.branchId
            FROM Process p, ProcessBranch pb
            WHERE p.processId = pb.process.processId
            AND p.name = :processName
            AND pb.branchName = :branchName)
            AND pmv.versionNumber =
            (SELECT max(pmv1.versionNumber) from ProcessModelVersion pmv1
            WHERE pmv1.processBranch.branchId =
            (SELECT pb1.branchId
            FROM Process p1, ProcessBranch pb1
            WHERE p1.processId = pb1.process.processId
            AND p1.name = :processName
            AND pb1.branchName = :branchName))</query>
    </named-query>
    <named-query name="processModelVersion.getCurrentProcessModelVersionC">
        <!-- Used ProcessModelVersionDao -->
        <query>SELECT pmv
            FROM ProcessModelVersion pmv, Process p, ProcessBranch pb
            WHERE p.processId = pb.process.processId
            AND pb.branchId = pmv.processBranch.branchId
            AND p.name = :processName
            AND pb.branchName = :branchName
            AND pmv.versionName = :versionName
        </query>
    </named-query>
    <named-query name="processModelVersion.getMaxModelVersions">
        <!-- Used FragmentVersionDao -->
        <query>SELECT new map(pmv.processBranch.branchId, max(pmv.versionNumber))
            FROM ProcessModelVersion pmv, ProcessFragmentMap pfm
            WHERE pmv.processModelVersionId = pfm.processModelVersion.processModelVersionId
            AND pfm.fragmentVersion.fragmentVersionId = :fragmentVersionId
            GROUP BY pmv.processBranch.branchId
        </query>
    </named-query>
    <named-query name="processModelVersion.getCurrentModelVersions">
        <!-- Used FragmentVersionDao -->
        <query>SELECT new map(pmv1.processBranch.branchId, max(pmv1.versionNumber))
            FROM ProcessModelVersion pmv1, ProcessModelVersion pmv2, ProcessFragmentMap pfm
            WHERE pmv2.processModelVersionId = pfm.processModelVersion.processModelVersionId
            AND pfm.fragmentVersion.fragmentVersionId = :fragmentVersionId
            AND pmv2.processBranch.branchId = pmv1.processBranch.branchId
            GROUP BY pmv1.processBranch.branchId
        </query>
    </named-query>


    <named-query name="processModelMap.getContainedProcessModel">
        <!-- Used FragmentVersionDao -->
        <query>SELECT fv.processModelVersion.processModelVersionId
            FROM ProcessFragmentMap fv
            WHERE fv.fragmentVersion.fragmentVersionId = :fragVersionId
        </query>
    </named-query>


    <named-query name="user.getAllUsers">
        <!-- Used UserDao -->
        <query>SELECT usr FROM User usr</query>
    </named-query>


    <named-query name="node.getContentIds">
        <!-- Used NodeDao -->
        <query>SELECT distinct v.content.contentId
            FROM Node v
        </query>
    </named-query>
    <named-query name="node.getVerticesByContentId">
        <!-- Used NodeDao -->
        <query>SELECT v
            FROM Node v
            WHERE v.content.contentId = :contentId
        </query>
    </named-query>
    <named-query name="node.getVerticesByFragmentId">
        <!-- Used NodeDao -->
        <query>SELECT v
            FROM Node v, FragmentVersion fv
            WHERE v.content.contentId = fv.content.contentId AND fv.fragmentVersionId = :fragmentId
        </query>
    </named-query>
    <named-query name="node.getStoredVertices">
        <!-- Used NodeDao -->
        <query>SELECT count(v) FROM Node v</query>
    </named-query>
    
    <named-query name="fragmentVersion.getSharedFragmentIds">
        <!-- Used FragmentVersionDao -->
        <query>select fvd.id.childFragmentVersionId FROM FragmentVersionDag fvd, FragmentVersion f where fvd.id.childFragmentVersionId=f.fragmentVersionId and f.fragmentSize > :minFragmentSize group by fvd.id.childFragmentVersionId having count(fvd.id.fragmentVersionId) > :minSharings</query>
    </named-query>
    
    <named-query name="fragmentVersion.getProcessesOfFragment">
        <!-- Used FragmentVersionDao -->
        <query>select p.name 
				from Process p, ProcessBranch b, ProcessModelVersion pv, ProcessFragmentMap m 
				where m.processModelVersion.processModelVersionId=pv.processModelVersionId and 
				pv.processBranch.branchId=b.branchId and 
				b.process.processId=p.processId and 
				m.fragmentVersion.fragmentVersionId=:fragmentId
        </query>
    </named-query>

</entity-mappings>